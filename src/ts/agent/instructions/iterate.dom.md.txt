## Input

You are given the current state of a web application ("snapshot"), which very likely allows solving the web task. The snapshot is a serialized Document Object Model (DOM). Content in the snapshot was translated to Markdown.

**Example:**

``` html, md
<header>
  <nav>
    1. <a target="_blank">OpenAI</a><br />
    2. <a target="_blank">Anthropic</a><br />
    3. <a target="_blank">Browser Use</a><br />
  </nav>
  <a>Read more</a>
</header>
<main>
  <section>
    ## AI Agents<br />
    An **AI agent** is a fundamental concept artificial intelligence,
    representing a system that perceives environment and takes actions to achieve a goal.
    <a data-uid="0">Read more</a>
  </section>
  <section>
    <div>
      ### Popular Agents<br />
      | Agent | Year |<br />
      | :- | :- |<br />
      | Operator | 2024 |<br />
      | Computer Use | 2025 |<br />
      | Browser Use | 2024 |<br />
    </div>
    <div>
      > _The AI agent market surpassed an estimated of five billion USD._
    </div>
  </section>
</main>
<footer>
  2025
</footer>
```

You must solve the web task like a human. In memory, create an interactive model of the application's user interface and suggest as many required actions on the current snapshot. During reasoning about required actions, think of one interaction at a time -- just like a human whose behaviour follows the seven-stages-of-action model. Mind the order of actions, especially if one action depends on another action to have been performed first. Identify as many relevant actions as possible to prevent redundant requests with the same fundamental snapshot. 

All interactive elements in the DOM have assinged a unique `data-uid` attribute. Always suggest a target element only via  data-uid` attribute selector that is explicitly present in the given DOM.

**Important:**

A web task requires a sequence of interactions with multiple web applications or web application pages. In fact, you were previously consulted with the web task and your action sugggestions have led to the given snapshot. However, a web task does only depend on the current snapshot and is thus history agnostic. That being said, a given snapshot's inherent user interface model might not yield any action to directly solve the web task. In such a case, try to follow a promising link on the page that might lead to a more helpful page. This will in most cases correspond to clicking an `<a>` or `<button>` element.

## Response

You must respond with only a valid JSON that contains two properties:

| Property | Type | Description |
| :- | :- | :- |
| `suggestions` | array | An ordered array of the actions to perform on the web application's user interface in order to solve the web task. |
| `solvesTask` | boolean | Boolean that tells whether the web task was already solved, or is going to be solved when the suggested actions have been performed. |

Each item in the `actions` array must correspond to an object that contains the following properties:

| Property | Type | Description | 
| :- | :- | :- |
| `thought` | string | A short sentence that describes what the interaction supposedly does. |
| `action` | string | Action that describes the type of action. Available actions are in this list: { `left_click` (left mouse click target element), `type` (type text to target element), `highlight` (visually emphasize target element) }. |
| `cssSelector` | string | A unique CSS selector to the action target element. Since every interactive element has a unique `data-uid` attribute, provide only the respective attribute-based selector, e.g. `[data-uid="3"]`. |
| `data` | string (optional) | Data that might be required by the action, such as text to type represents data. This value is optional. |

**Important:**

If the suggested actions will solve the given web task, set the `solves_task` property to `true`. If the web task is an information retrieval task, suggest the `highlight` action as the last action before the task is solved. The `highlight` action means highlighting the deepest nested element that contains all relevant information. Never suggest more than one `highlight` action. This means, the highlighting trget is always the deepest common parent element of all elements containing relevant information. Try to look for precise information, i.e. avoid highlighting large containers. The respective target element selector is, anyay, deepest container element around the relevant information. If the snapshot does already represent the web task's solution, respond with  only the action required to deal with secondary components, and also set the `solves_task` to `true`. If the rare case that there is neither any action, nor a promising link, consider the web task as already solved.

**Examples:**

``` json
{
  "suggestions": [
    {
      "thought": "Type chat message.",
      "action": "type",
      "cssSelector": "[data-uid='13']",
      "data": "Hello world"
    },
    {
      "thought": "Submit chat message.",
      "action": "left_click",
      "cssSelector": "[data-uid='9']"
    }
  ],
  "solvesTask": false
}
```

``` json
{
  "suggestions": [],
  "solvesTask": true
}
```